<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guan.community.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

<!--    List<Message> selectByToId (int userId);-->
    <select id="selectByToId" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id)
            from message
            where status != 2 and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

<!--    int selectConversationCount(int userId);-->
    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from (
            select max(id) as maxid
            from message
            where status != 2 and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) as m

    </select>


<!--    List<Message> selectLetters(String conversationId, int offset, int limit);-->
    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}

    </select>


<!--    int selectLetterCount(String conversationId);-->
    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where conversation_id = #{conversationId}
        and status != 2
        and from_id != 1
    </select>

<!--    int selectLetterUnreadCount(int userId, String conversationId);-->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

<!--    int insertLetter(Message message);-->
    <insert id="insertLetter" parameterType="Message" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values (#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

<!--    int updateStatus(int[] ids, int status);-->
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

<!--    // 查询某个话题的会话数量.-->
<!--    int selectNoticeCount(int userId, String topic);-->
    <select id="selectNoticeCount" resultType="int">
        select count(id)
        from message
        where to_id = #{userId}
        and conversation_id = #{topic}
        and status != 2
        and from_id = 1
    </select>

<!--    //查询未读通知数量-->
<!--    int selectUnreadNoticeCount(int userId, String topic);-->
    <select id="selectUnreadNoticeCount" resultType="int">
        select count(id)
        from message
        where to_id = #{userId}
        and status = 0
        and from_id = 1
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>

<!--    //查询某话题最近通知-->
<!--    Message selectLastNotice(int userId, String topic);-->
    <select id="selectLastNotice" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where to_id = #{userId}
            and conversation_id = #{topic}
            and status != 2
            and from_id = 1
        )
    </select>


<!--    //查询某话题的通知列表-->
<!--    List<Message> selectNotices(int userId, String topic);-->
    <select id="selectNotices" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where to_id = #{userId}
        and conversation_id = #{topic}
        and status != 2
        and from_id = 1
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

</mapper>